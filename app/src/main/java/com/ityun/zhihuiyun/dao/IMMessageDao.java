package com.ityun.zhihuiyun.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ityun.zhihuiyun.bean.IMMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMMESSAGE".
*/
public class IMMessageDao extends AbstractDao<IMMessage, Long> {

    public static final String TABLENAME = "IMMESSAGE";

    /**
     * Properties of entity IMMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Im_id = new Property(0, Long.class, "im_id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "USER_ID");
        public final static Property ImType = new Property(2, int.class, "imType", false, "IM_TYPE");
        public final static Property ImId = new Property(3, int.class, "imId", false, "IM_ID");
        public final static Property MessageSendId = new Property(4, int.class, "messageSendId", false, "MESSAGE_SEND_ID");
        public final static Property MemberName = new Property(5, String.class, "memberName", false, "MEMBER_NAME");
        public final static Property SendName = new Property(6, String.class, "sendName", false, "SEND_NAME");
        public final static Property IsSelf = new Property(7, int.class, "isSelf", false, "IS_SELF");
        public final static Property MeessageTpye = new Property(8, int.class, "meessageTpye", false, "MEESSAGE_TPYE");
        public final static Property CreateTime = new Property(9, long.class, "createTime", false, "CREATE_TIME");
        public final static Property VoicePath = new Property(10, String.class, "voicePath", false, "VOICE_PATH");
        public final static Property VoiceHasOpen = new Property(11, int.class, "voiceHasOpen", false, "VOICE_HAS_OPEN");
        public final static Property ImagePath = new Property(12, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property LoadId = new Property(13, int.class, "loadId", false, "LOAD_ID");
        public final static Property FileProgress = new Property(14, int.class, "fileProgress", false, "FILE_PROGRESS");
        public final static Property FileUrl = new Property(15, String.class, "fileUrl", false, "FILE_URL");
        public final static Property Message = new Property(16, String.class, "message", false, "MESSAGE");
        public final static Property IsRead = new Property(17, int.class, "isRead", false, "IS_READ");
        public final static Property SendState = new Property(18, int.class, "sendState", false, "SEND_STATE");
    }


    public IMMessageDao(DaoConfig config) {
        super(config);
    }
    
    public IMMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMMESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: im_id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"IM_TYPE\" INTEGER NOT NULL ," + // 2: imType
                "\"IM_ID\" INTEGER NOT NULL ," + // 3: imId
                "\"MESSAGE_SEND_ID\" INTEGER NOT NULL ," + // 4: messageSendId
                "\"MEMBER_NAME\" TEXT," + // 5: memberName
                "\"SEND_NAME\" TEXT," + // 6: sendName
                "\"IS_SELF\" INTEGER NOT NULL ," + // 7: isSelf
                "\"MEESSAGE_TPYE\" INTEGER NOT NULL ," + // 8: meessageTpye
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 9: createTime
                "\"VOICE_PATH\" TEXT," + // 10: voicePath
                "\"VOICE_HAS_OPEN\" INTEGER NOT NULL ," + // 11: voiceHasOpen
                "\"IMAGE_PATH\" TEXT," + // 12: imagePath
                "\"LOAD_ID\" INTEGER NOT NULL ," + // 13: loadId
                "\"FILE_PROGRESS\" INTEGER NOT NULL ," + // 14: fileProgress
                "\"FILE_URL\" TEXT," + // 15: fileUrl
                "\"MESSAGE\" TEXT," + // 16: message
                "\"IS_READ\" INTEGER NOT NULL ," + // 17: isRead
                "\"SEND_STATE\" INTEGER NOT NULL );"); // 18: sendState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMMESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMMessage entity) {
        stmt.clearBindings();
 
        Long im_id = entity.getIm_id();
        if (im_id != null) {
            stmt.bindLong(1, im_id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getImType());
        stmt.bindLong(4, entity.getImId());
        stmt.bindLong(5, entity.getMessageSendId());
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(6, memberName);
        }
 
        String sendName = entity.getSendName();
        if (sendName != null) {
            stmt.bindString(7, sendName);
        }
        stmt.bindLong(8, entity.getIsSelf());
        stmt.bindLong(9, entity.getMeessageTpye());
        stmt.bindLong(10, entity.getCreateTime());
 
        String voicePath = entity.getVoicePath();
        if (voicePath != null) {
            stmt.bindString(11, voicePath);
        }
        stmt.bindLong(12, entity.getVoiceHasOpen());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(13, imagePath);
        }
        stmt.bindLong(14, entity.getLoadId());
        stmt.bindLong(15, entity.getFileProgress());
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(16, fileUrl);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(17, message);
        }
        stmt.bindLong(18, entity.getIsRead());
        stmt.bindLong(19, entity.getSendState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMMessage entity) {
        stmt.clearBindings();
 
        Long im_id = entity.getIm_id();
        if (im_id != null) {
            stmt.bindLong(1, im_id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getImType());
        stmt.bindLong(4, entity.getImId());
        stmt.bindLong(5, entity.getMessageSendId());
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(6, memberName);
        }
 
        String sendName = entity.getSendName();
        if (sendName != null) {
            stmt.bindString(7, sendName);
        }
        stmt.bindLong(8, entity.getIsSelf());
        stmt.bindLong(9, entity.getMeessageTpye());
        stmt.bindLong(10, entity.getCreateTime());
 
        String voicePath = entity.getVoicePath();
        if (voicePath != null) {
            stmt.bindString(11, voicePath);
        }
        stmt.bindLong(12, entity.getVoiceHasOpen());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(13, imagePath);
        }
        stmt.bindLong(14, entity.getLoadId());
        stmt.bindLong(15, entity.getFileProgress());
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(16, fileUrl);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(17, message);
        }
        stmt.bindLong(18, entity.getIsRead());
        stmt.bindLong(19, entity.getSendState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMMessage readEntity(Cursor cursor, int offset) {
        IMMessage entity = new IMMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // im_id
            cursor.getInt(offset + 1), // userId
            cursor.getInt(offset + 2), // imType
            cursor.getInt(offset + 3), // imId
            cursor.getInt(offset + 4), // messageSendId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // memberName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sendName
            cursor.getInt(offset + 7), // isSelf
            cursor.getInt(offset + 8), // meessageTpye
            cursor.getLong(offset + 9), // createTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // voicePath
            cursor.getInt(offset + 11), // voiceHasOpen
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // imagePath
            cursor.getInt(offset + 13), // loadId
            cursor.getInt(offset + 14), // fileProgress
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // fileUrl
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // message
            cursor.getInt(offset + 17), // isRead
            cursor.getInt(offset + 18) // sendState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMMessage entity, int offset) {
        entity.setIm_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setImType(cursor.getInt(offset + 2));
        entity.setImId(cursor.getInt(offset + 3));
        entity.setMessageSendId(cursor.getInt(offset + 4));
        entity.setMemberName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSendName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsSelf(cursor.getInt(offset + 7));
        entity.setMeessageTpye(cursor.getInt(offset + 8));
        entity.setCreateTime(cursor.getLong(offset + 9));
        entity.setVoicePath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVoiceHasOpen(cursor.getInt(offset + 11));
        entity.setImagePath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLoadId(cursor.getInt(offset + 13));
        entity.setFileProgress(cursor.getInt(offset + 14));
        entity.setFileUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMessage(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsRead(cursor.getInt(offset + 17));
        entity.setSendState(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMMessage entity, long rowId) {
        entity.setIm_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMMessage entity) {
        if(entity != null) {
            return entity.getIm_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMMessage entity) {
        return entity.getIm_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
